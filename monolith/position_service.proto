syntax = "proto3";

package hub_investments;

import "common/common.proto";

option go_package = "github.com/RodriguesYan/hub-proto-contracts/monolith";

// ====================================
// POSITION SERVICE
// ====================================

// PositionService provides position management operations
service PositionService {
  // GetPositions retrieves all positions for a user
  rpc GetPositions(GetPositionsRequest) returns (GetPositionsResponse);
  // GetPositionAggregation retrieves aggregated position data for a user
  rpc GetPositionAggregation(GetPositionAggregationRequest) returns (GetPositionAggregationResponse);
  // CreatePosition creates a new position (for internal use)
  rpc CreatePosition(CreatePositionRequest) returns (CreatePositionResponse);
  // UpdatePosition updates an existing position (for internal use)
  rpc UpdatePosition(UpdatePositionRequest) returns (UpdatePositionResponse);
}

// ====================================
// POSITION SERVICE MESSAGES
// ====================================

message GetPositionsRequest {
  string user_id = 1;
  optional string symbol = 2;  // Filter by symbol if provided
  optional string status = 3;  // Filter by status if provided
}

message GetPositionsResponse {
  APIResponse api_response = 1;
  repeated Position positions = 2;
}

message GetPositionAggregationRequest {
  string user_id = 1;
}

message GetPositionAggregationResponse {
  APIResponse api_response = 1;
  PositionAggregation aggregation = 2;
}

message CreatePositionRequest {
  string user_id = 1;
  string symbol = 2;
  double quantity = 3;
  double price = 4;
  string position_type = 5;  // LONG, SHORT
  optional string source_order_id = 6;
  optional string created_from = 7;
}

message CreatePositionResponse {
  APIResponse api_response = 1;
  string position_id = 2;
  string status = 3;
  double total_investment = 4;
}

message UpdatePositionRequest {
  string position_id = 1;
  string user_id = 2;
  double trade_quantity = 3;
  double trade_price = 4;
  bool is_buy_order = 5;
  optional string source_order_id = 6;
  optional string execution_time = 7;
}

message UpdatePositionResponse {
  APIResponse api_response = 1;
  string position_id = 2;
  double new_quantity = 3;
  double new_average_price = 4;
  double new_total_investment = 5;
  string status = 6;
  string transaction_type = 7;
  optional double realized_pnl = 8;
  optional double realized_pnl_pct = 9;
  int32 events_published = 10;
}

// Position contains position information
message Position {
  string position_id = 1;
  string user_id = 2;
  string symbol = 3;
  double quantity = 4;
  double average_price = 5;
  double total_investment = 6;
  double current_price = 7;
  double market_value = 8;
  double unrealized_pnl = 9;
  double unrealized_pnl_pct = 10;
  string position_type = 11;  // LONG, SHORT
  string status = 12;         // ACTIVE, PARTIAL, CLOSED
  string created_at = 13;
  string updated_at = 14;
  optional string last_trade_at = 15;
}

// PositionAggregation contains aggregated position data
message PositionAggregation {
  double total_invested = 1;
  double total_current_value = 2;
  double total_unrealized_pnl = 3;
  double total_unrealized_pnl_pct = 4;
  int32 total_positions = 5;
  int32 active_positions = 6;
  repeated CategoryAggregation categories = 7;
  repeated Position positions = 8;
}

// CategoryAggregation contains aggregated data by asset category
message CategoryAggregation {
  int32 category_id = 1;
  string category_name = 2;
  double total_invested = 3;
  double total_current_value = 4;
  double total_unrealized_pnl = 5;
  double unrealized_pnl_pct = 6;
  int32 position_count = 7;
  double weight_pct = 8;
}
